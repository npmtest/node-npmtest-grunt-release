{"/home/travis/build/npmtest/node-npmtest-grunt-release/test.js":"/* istanbul instrument in package npmtest_grunt_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-release/lib.npmtest_grunt_release.js":"/* istanbul instrument in package npmtest_grunt_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_release = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_release = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-release/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-release && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_release */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_release\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_release.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_release.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_release.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_release.__dirname + '/lib.npmtest_grunt_release.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-release/node_modules/grunt-release/Gruntfile.js":"module.exports = function(grunt) {\n  'use strict';\n\n  grunt.initConfig({\n\n    clean: {\n      test: 'test/fixtures/_*.{json,md}'\n    },\n    nodeunit: {\n      tests: 'test/release_test.js'\n    },\n    release: {\n      options: {\n        bump: true,\n        file: 'package.json',\n        changelog: 'CHANGELOG.md',\n        changelogText: '### <%= version %> - ' + grunt.template.today('yyyy-mm-dd') + '\\n',\n        commitMessage: 'v<%= version %>',\n        add: true,\n        commit: true,\n        tag: true,\n        push: true,\n        pushTags: true,\n        npm: true,\n        npmtag: false,\n        github: {\n          repo: 'geddski/grunt-release',\n          accessTokenVar: 'GITHUB_ACCESS_TOKEN'\n        }\n      }\n    },\n    releaseTest: {\n      options: {\n        bump: true,\n        add: false,\n        commit: false,\n        tag: false,\n        push: false,\n        pushTags: false,\n        npm: false,\n        npmtag: false,\n        github: false\n      },\n      general: {\n        options: {\n          file: 'test/fixtures/_component.json',\n          changelog: 'test/fixtures/_CHANGELOG.md',\n          additionalFiles: ['test/fixtures/_bower.json'],\n          changelogText: grunt.template.process('### <%= version %>\\n', {data: {'version': '0.0.13'}}),\n          commitMessage: grunt.template.process('v<%= version %>', {data: {'version': '0.0.13'}})\n        }\n      },\n      absolute: {\n        args: ['1.2.3'],\n        options: {\n          file: 'test/fixtures/_bower-absolute.json'\n        }\n      },\n      patch: {\n        args: ['patch'],\n        options: {\n          file: 'test/fixtures/_component-patch.json'\n        }\n      },\n      minor: {\n        args: ['minor'],\n        options: {\n          file: 'test/fixtures/_component-minor.json'\n        }\n      },\n      major: {\n        args: ['major'],\n        options: {\n          file: 'test/fixtures/_component-major.json'\n        }\n      }\n    },\n    setup: {\n      test: {\n        files: [{\n          from: 'test/fixtures/component.json',\n          dest: 'test/fixtures/_component.json'\n        },{\n          from: 'test/fixtures/bower.json',\n          dest: 'test/fixtures/_bower.json'\n        },{\n          from: 'test/fixtures/CHANGELOG.md',\n          dest: 'test/fixtures/_CHANGELOG.md'\n        },{\n          from: 'test/fixtures/bower.json',\n          dest: 'test/fixtures/_bower-absolute.json'\n        },{\n          from: 'test/fixtures/component.json',\n          dest: 'test/fixtures/_component-patch.json'\n        },{\n          from: 'test/fixtures/component.json',\n          dest: 'test/fixtures/_component-minor.json'\n        },{\n          from: 'test/fixtures/component.json',\n          dest: 'test/fixtures/_component-major.json'\n        }]\n      }\n    }\n  });\n\n  grunt.loadTasks('tasks');\n  grunt.loadNpmTasks('grunt-contrib-clean');\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n  grunt.registerTask('test', [\n    'clean',\n    'setup',\n    'releaseTest',\n    'nodeunit',\n    'clean'\n  ]);\n\n  grunt.registerMultiTask('setup', 'Setup test fixtures', function(){\n    this.files.forEach(function(f){\n      grunt.file.copy(f.from, f.dest);\n    });\n  });\n\n  grunt.registerMultiTask('releaseTest', function(){\n    var args = (this.data.args || []).join(':');\n\n    grunt.config.set('release', {});\n    grunt.config.merge({\n      release: grunt.config.data[this.name]\n    });\n\n    grunt.config.merge({\n      release: grunt.config.data[this.name][this.target]\n    });\n\n    grunt.task.run('release' + (args && ':' + args));\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-release/node_modules/grunt-release/tasks/grunt-release.js":"/*\n * grunt-release\n * https://github.com/geddski/grunt-release\n *\n * Copyright (c) 2013 Dave Geddes\n * Licensed under the MIT license.\n */\n'use strict';\n\nvar shell = require('shelljs');\nvar semver = require('semver');\nvar request = require('superagent');\nvar Q = require('q');\n\nmodule.exports = function(grunt) {\n    grunt.registerTask('release', 'Bump version, git tag, git push, npm publish', function(type) {\n\n        function setup(file, type) {\n            var pkg = grunt.file.readJSON(file);\n            var newVersion = pkg.version;\n            var files;\n            var vars;\n\n            if (options.bump) {\n                if (semver.valid(type)) {\n                    newVersion = type;\n                } else {\n                    newVersion = semver.inc(pkg.version, type || 'patch');\n                }\n            }\n\n            // Check if options.additionalFiles is a single file\n            if (typeof options.additionalFiles === 'string') {\n                files = options.additionalFiles.split(',').map(function(value) {\n                    return value.trim();\n                });\n\n                // You can also add a string with multiple files separated by `,`\n                options.additionalFiles = [].concat(files);\n            }\n\n            if (typeof options.updateVars === 'string') {\n                vars = options.updateVars.split(',').map(function(value) {\n                    return value.trim();\n                });\n\n                options.updateVars = [].concat(vars);\n            }\n\n            options.additionalFiles.push(file);\n\n            if (options.github && !options.github.apiRoot) {\n                options.github.apiRoot = 'https://api.github.com'; // Default Github.com api\n            }\n\n            return {\n                files: options.additionalFiles,\n                vars: options.updateVars,\n                newVersion: newVersion,\n                pkg: pkg\n            };\n        }\n\n        // Defaults\n        var options = grunt.util._.extend({\n            bump: true,\n            changelog: false, // Update changelog file\n\n            // Text which is inserted into change log\n            changelogText: '### <%= version %> - <%= grunt.template.today(\"yyyy-mm-dd\") %>\\n',\n\n            // file is in charge of master information, ie, it is it which define the base version to work on\n            file: grunt.config('pkgFile') || 'package.json',\n\n            // additionalFiles are additional files that also need to be bumped\n            additionalFiles: [],\n            // updateVars are grunt variables that also need to be bumped\n            updateVars: [],\n            add: true,\n            commit: true,\n            tag: true,\n            push: true,\n            pushTags: true,\n            npm: true,\n            remote: 'origin',\n            beforeReleaseTasks: [],\n            afterReleaseTasks: [],\n            beforeBumpTasks: [],\n            afterBumpTasks: []\n        }, (grunt.config.data[this.name] ||  {}).options);\n        var config = setup(options.file, type);\n\n        var templateOptions = {\n            data: {\n                name: config.name || '',\n                version: config.newVersion\n            }\n        };\n        var tagName = grunt.template.process(grunt.config.getRaw(this.name + '.options.tagName') || '<%= version %>', templateOptions);\n        var commitMessage = grunt.template.process(grunt.config.getRaw(this.name + '.options.commitMessage') || 'release <%= version %>', templateOptions);\n        var tagMessage = grunt.template.process(grunt.config.getRaw(this.name + '.options.tagMessage') || 'version <%= version %>', templateOptions);\n\n        var nowrite = grunt.option('no-write');\n        var indentation = grunt.option('indentation') || '  ';\n        var done = this.async();\n\n        if (!config.newVersion) {\n            grunt.warn('Resulting version number is empty.');\n        }\n\n        if (nowrite) {\n            grunt.log.ok('Release dry run.');\n        }\n\n        function getNpmTag() {\n            var tag = grunt.option('npmtag') || options.npmtag;\n            if (tag === true) {\n                tag = config.newVersion;\n            }\n\n            return tag;\n        }\n\n        function ifEnabled(option, fn) {\n            if (options[option]) {\n                return fn;\n            }\n        }\n\n        function run(cmd, msg) {\n            var deferred = Q.defer();\n            grunt.verbose.writeln('Running: ' + cmd);\n\n            if (nowrite) {\n                grunt.log.ok(msg || cmd);\n                deferred.resolve();\n            } else {\n                var success = shell.exec(cmd, {\n                    silent: true\n                }).code === 0;\n\n                if (success) {\n                    grunt.log.ok(msg || cmd);\n                    deferred.resolve();\n                } else {\n                    // fail and stop execution of further tasks\n                    deferred.reject('Failed when executing: `' + cmd + '`\\n');\n                }\n            }\n            return deferred.promise;\n        }\n\n        function changelog() {\n            var filename = options.changelog;\n\n            // Default filename\n            if (options.changelog === true) {\n                filename = 'CHANGELOG.md';\n            }\n\n            config.files.push(filename);\n\n            return Q.fcall(function() {\n                var changelogText = grunt.template.process(options.changelogText, templateOptions);\n                var changelogContent = changelogText + grunt.file.read(filename);\n\n                grunt.file.write(filename, changelogContent);\n                grunt.log.ok('Changelog ' + filename + ' updated');\n            });\n        }\n\n        function add() {\n            var files = config.files.join(' ');\n            return run('git add ' + files, ' staged ' + files);\n        }\n\n        function commit() {\n            if (typeof commitMessage === 'string') {\n                commitMessage = [commitMessage];\n            }\n\n            var message = commitMessage.map(function(el) {\n                return '-m \"' + grunt.template.process(el, templateOptions) + '\"';\n            }).join(' ');\n\n            return run('git commit ' + message, 'Committed all files');\n        }\n\n        function tag() {\n            return run('git tag ' + tagName + ' -m \"' + tagMessage + '\"', 'created new git tag: ' + tagName);\n        }\n\n        function push() {\n            run('git push ' + options.remote + ' HEAD', 'pushed to remote');\n        }\n\n        function pushTags() {\n            run('git push ' + options.remote + ' ' + tagName, 'pushed new tag ' + config.newVersion + ' to remote');\n        }\n\n        function publish() {\n            var cmd = 'npm publish';\n            var msg = 'published version ' + config.newVersion + ' to npm';\n            var npmtag = getNpmTag();\n            if (npmtag) {\n                cmd += ' --tag ' + npmtag;\n                msg += ' with a tag of \"' + npmtag + '\"';\n            }\n\n            if (options.folder) {\n                cmd += ' ' + options.folder;\n            }\n            return run(cmd, msg);\n        }\n\n        function bump() {\n            var i, file, pkg, promise, variable,\n                promises = [], configProp, fullProp;\n\n            if (config.vars.length > 0) {\n                for (i = 0; i < config.vars.length; i++) {\n                    variable = config.vars[i];\n                    configProp = grunt.config(variable);\n                    if (typeof configProp === 'object') {\n                        fullProp = variable + '.version';\n                        grunt.config(fullProp, config.newVersion);\n                    } else if (typeof configProp === 'string') {\n                        fullProp = configProp;\n                        grunt.config(fullProp, config.newVersion);\n                    }\n                    grunt.log.ok('bumped version of ' + fullProp + ' to ' + config.newVersion);\n                }\n            }\n\n            for (i = 0; i < config.files.length; i++) {\n                file = config.files[i];\n                promise = (function(file) {\n                    return Q.fcall(function() {\n                        pkg = grunt.file.readJSON(file);\n                        pkg.version = config.newVersion;\n                        grunt.file.write(file, JSON.stringify(pkg, null, indentation) + '\\n');\n                        grunt.log.ok('bumped version of ' + file + ' to ' + config.newVersion);\n                    });\n                }(file));\n                promises.push(promise);\n            }\n            return Q.all(promises);\n        }\n\n        function githubRelease() {\n            var deferred = Q.defer();\n            var username;\n            var password;\n\n            if (!!options.github.usernameVar && !!options.github.passwordVar) {\n                username = process.env[options.github.usernameVar];\n                password = process.env[options.github.passwordVar];\n\n                if (!username) {\n                    grunt.log.warn('Error: No username for GitHub release');\n                } else if (!password) {\n                    grunt.log.warn('Error: No password for GitHub release');\n                }\n            } else if (!!options.github.accessTokenVar) {\n                username = process.env[options.github.accessTokenVar];\n                password = '';\n\n                if (!username) {\n                    grunt.log.warn('Error: No access token for GitHub');\n                }\n            } else {\n                grunt.log.warn('Error: Please set GitHub Access Token or username and password');\n            }\n\n            function success() {\n                grunt.log.ok('created ' + tagName + ' release on GitHub.');\n                deferred.resolve();\n            }\n\n            if (nowrite) {\n                success();\n                return;\n            }\n\n            request\n                .post(options.github.apiRoot + '/repos/' + options.github.repo + '/releases')\n                .auth(username, password)\n                .set('Accept', 'application/vnd.github.manifold-preview')\n                .set('User-Agent', 'grunt-release')\n                .send({\n                    'tag_name': tagName,\n                    name: tagMessage,\n                    prerelease: type === 'prerelease'\n                })\n                .end(function(err, res) {\n                    if (res && res.statusCode === 201) {\n                        success();\n                    } else {\n                        deferred.reject('Error creating GitHub release. Response: ' + res.text);\n                    }\n                });\n\n            return deferred.promise;\n        }\n\n        function runTasks(taskName) {\n            var tasks = options[taskName];\n            var promises = [];\n\n            if (Array.isArray(tasks) && tasks.length) {\n                grunt.log.ok('running ' + taskName + ' ');\n                if (!nowrite) {\n                    for (var i = 0; i < tasks.length; i++) {\n                        promises.push(run('grunt ' + tasks[i], '-> ' + tasks[i]));\n                    }\n                }\n            }\n\n            return Q.all(promises);\n        }\n\n        new Q()\n            .then(ifEnabled('beforeBump', runTasks('beforeBump')))\n            .then(ifEnabled('bump', bump))\n            .then(ifEnabled('afterBump', runTasks('afterBump')))\n            .then(ifEnabled('beforeRelease', runTasks('beforeRelease')))\n            .then(ifEnabled('changelog', changelog))\n            .then(ifEnabled('add', add))\n            .then(ifEnabled('commit', commit))\n            .then(ifEnabled('tag', tag))\n            .then(ifEnabled('push', push))\n            .then(ifEnabled('pushTags', pushTags))\n            .then(ifEnabled('npm', publish))\n            .then(ifEnabled('github', githubRelease))\n            .then(ifEnabled('afterRelease', runTasks('afterRelease')))\n            .catch(function(msg) {\n                grunt.fail.warn(msg || 'release failed');\n            })\n            .finally(done);\n\n    });\n\n};\n"}